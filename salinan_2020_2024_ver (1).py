# -*- coding: utf-8 -*-
"""Salinan 2020-2024 ver.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12iHO2gz9md-6cssVaL1kPObe28SdoBCK
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
import seaborn as sns

data = pd.read_excel("banjir_2020-2024_ver.xlsx")
data['Tahun']=data['Tahun'].ffill()
data.head()

kejadian_per_provinsi = data.groupby("Wilayah")["Jumlah Kejadian"].sum().sort_values(ascending=False)

#frekuensi per tahun
plt.figure(figsize=(12, 6))
sns.barplot(x=kejadian_per_provinsi.values, y=kejadian_per_provinsi.index, hue=kejadian_per_provinsi.index, palette="viridis", legend=False)
plt.title("Jumlah Kejadian per Provinsi (2020-2024)")
plt.xlabel("Jumlah Kejadian")
plt.ylabel("Provinsi")
plt.show()

kejadian_per_provinsi = data.groupby("Wilayah")["Korban"].sum().sort_values(ascending=False)

#frekuensi per tahun
plt.figure(figsize=(12, 6))
sns.barplot(x=kejadian_per_provinsi.values, y=kejadian_per_provinsi.index, hue=kejadian_per_provinsi.index, palette="viridis", legend=False)
plt.title("Jumlah Korban per Provinsi (2020-2024)")
plt.xlabel("Korban")
plt.ylabel("Provinsi")
plt.show()

kejadian_per_provinsi = data.groupby("Wilayah")["Fasilitas terdampak"].sum().sort_values(ascending=False)

#frekuensi per tahun
plt.figure(figsize=(12, 6))
sns.barplot(x=kejadian_per_provinsi.values, y=kejadian_per_provinsi.index, hue=kejadian_per_provinsi.index, palette="viridis", legend=False)
plt.title("Jumlah Fasilitas terdampak per Provinsi (2020-2024)")
plt.xlabel("Fasilitas terdampak")
plt.ylabel("Provinsi")
plt.show()

data.info()
data.shape

data.shape

data.isnull().sum()

data.info()

fitur_numerik = ["Jumlah Kejadian", "Korban", "Fasilitas terdampak", "Rumah terdampak"]
X = data[fitur_numerik].values

scaler = StandardScaler()

X_scaled = scaler.fit_transform(X)
X_scaled

X = data.iloc[:,2:6].values
print(X)

wcss = []
for i in range(1,11):
    k_means = KMeans(n_clusters=i,init='k-means++', random_state=42)
    k_means.fit(X_scaled)
    wcss.append(k_means.inertia_)

plt.plot(np.arange(1,11),wcss)
plt.xlabel('Clusters')
plt.ylabel('SSE')

plt.show()

k_means_optimum = KMeans(n_clusters = 4, init = 'k-means++',  random_state=42)
y = k_means_optimum.fit_predict(X_scaled)
print(y)

data['cluster'] = y

data1 = data[data.cluster==0]
data2 = data[data.cluster==1]
data3 = data[data.cluster==2]

data2

data1

fitur_numerik = ["Jumlah Kejadian", "Korban", "Rumah terdampak", "Fasilitas terdampak"]

rata_rata_per_tahun_cluster = data.groupby(['Tahun', 'cluster'])[fitur_numerik].mean().reset_index()

print("Rata-rata Fitur per Tahun dan Cluster:")
display(rata_rata_per_tahun_cluster)

cluster_per_tahun = data.groupby(['Wilayah', 'cluster']).agg(
    Tahun=('Tahun', lambda x: sorted(x.unique())),
    Jumlah_Kejadian=('Jumlah Kejadian', 'sum'),
    Korban=('Korban', 'sum'),
    Rumah_terdampak=('Rumah terdampak', 'sum')
).reset_index()

def format_years(year_list):
    all_years = [2020, 2021, 2022, 2023, 2024]
    if sorted(year_list) == all_years:
        return '2020-2024'
    else:
        return ', '.join(map(str, year_list))


cluster_per_tahun['Tahun'] = cluster_per_tahun['Tahun'].apply(format_years)
cluster_per_tahun = cluster_per_tahun.sort_values(by='Jumlah_Kejadian', ascending=False)

data_cluster0 = cluster_per_tahun[cluster_per_tahun['cluster'] == 0].copy()
data_cluster1 = cluster_per_tahun[cluster_per_tahun['cluster'] == 1].copy()

data_cluster0

data_cluster1

fitur_numerik = ["Jumlah Kejadian", "Korban","Rumah terdampak", "Fasilitas terdampak"]

rata_rata_cluster = data.groupby('cluster')[fitur_numerik].mean()

print("Rata-rata Fitur per Cluster (menggunakan data asli):")
print(rata_rata_cluster)

fitur_numerik = ["Jumlah Kejadian", "Korban", "Fasilitas terdampak", "Rumah terdampak"]

rata_rata_per_tahun = data.groupby('Tahun')[fitur_numerik].mean()

print("Rata-rata Fitur per Tahun:")
rata_rata_per_tahun

kplot = plt.axes(projection='3d')
xline = np.linspace(0, 15, 1000)
yline = np.linspace(0, 15, 1000)
zline = np.linspace(0, 15, 1000)
kplot.plot3D(xline, yline, zline, 'black')
kplot.scatter3D(data1['Jumlah Kejadian'], data1['Korban'], data1['Rumah terdampak'], c='red', label = 'Cluster 0')
kplot.scatter3D(data2['Jumlah Kejadian'], data2['Korban'], data2['Rumah terdampak'], c='green', label = 'Cluster 1')
plt.scatter(k_means_optimum.cluster_centers_[:,0], k_means_optimum.cluster_centers_[:,1], color = 'indigo', s = 200)
plt.legend()
plt.title("Kmeans")
plt.show()

kplot = plt.axes(projection='3d')
xline = np.linspace(0, 15, 1000)
yline = np.linspace(0, 15, 1000)
zline = np.linspace(0, 15, 1000)
kplot.plot3D(xline, yline, zline, 'black')
kplot.scatter3D(data1['Korban'], data1['Fasilitas terdampak'], data1['Rumah terdampak'], c='red', label = 'Cluster 0')
kplot.scatter3D(data2['Korban'], data2['Fasilitas terdampak'], data2['Rumah terdampak'], c='green', label = 'Cluster 1')
plt.scatter(k_means_optimum.cluster_centers_[:,0], k_means_optimum.cluster_centers_[:,1], color = 'indigo', s = 200)
plt.legend()
plt.title("Kmeans")
plt.show()

kplot = plt.axes(projection='3d')
xline = np.linspace(0, 15, 1000)
yline = np.linspace(0, 15, 1000)
zline = np.linspace(0, 15, 1000)
kplot.plot3D(xline, yline, zline, 'black')
kplot.scatter3D(data1['Rumah terdampak'], data1['Rumah terdampak'], data1['Jumlah Kejadian'], c='red', label = 'Cluster 0')
kplot.scatter3D(data2['Rumah terdampak'], data2['Rumah terdampak'], data2['Jumlah Kejadian'], c='green', label = 'Cluster 1')
plt.scatter(k_means_optimum.cluster_centers_[:,0], k_means_optimum.cluster_centers_[:,1], color = 'indigo', s = 200)
plt.legend()
plt.title("Kmeans")
plt.show()

kplot = plt.axes(projection='3d')
xline = np.linspace(0, 15, 1000)
yline = np.linspace(0, 15, 1000)
zline = np.linspace(0, 15, 1000)
kplot.plot3D(xline, yline, zline, 'black')
kplot.scatter3D(data1['Fasilitas terdampak'], data1['Jumlah Kejadian'], data1['Korban'], c='red', label = 'Cluster 0')
kplot.scatter3D(data2['Fasilitas terdampak'], data2['Jumlah Kejadian'], data2['Korban'], c='green', label = 'Cluster 1')
plt.scatter(k_means_optimum.cluster_centers_[:,0], k_means_optimum.cluster_centers_[:,1], color = 'indigo', s = 200)
plt.legend()
plt.title("Kmeans")
plt.show()

from sklearn.metrics import silhouette_score
score = silhouette_score(X,y)
print(score)

grouped_by_year_province_cluster = data.groupby(['Tahun', 'Wilayah', 'cluster'])[['Jumlah Kejadian', 'Korban', 'Rumah terdampak', 'Fasilitas terdampak']].sum().reset_index()
grouped_by_year_province_cluster_sorted = grouped_by_year_province_cluster.sort_values(by=['Tahun', 'cluster', 'Jumlah Kejadian'], ascending=[True, False, False])
display(grouped_by_year_province_cluster_sorted)

from pandas.io.excel import ExcelWriter

output_filename = "banjir_data_per_provinsi_tahun_cluster.xlsx"
with ExcelWriter(output_filename) as writer:
    for province in grouped_by_year_province_cluster_sorted['Wilayah'].unique():
        province_data = grouped_by_year_province_cluster_sorted[grouped_by_year_province_cluster_sorted['Wilayah'] == province]
        province_data.to_excel(writer, sheet_name=province[:31], index=False)

print(f"Data exported to {output_filename}")